{"./":{"url":"./","title":"目录","keywords":"","body":"Stephon博客目录 -----个人简介😎----- 前言 -----前端😃----- 基础 html 简介 html5 css css3 js 浏览器 工程化与工具 性能优化与安全 自动化测试 框架与类库 全栈后台技术 Vue -----后台🙈----- 还没认真学呢 ---数据结构与算法🍭--- 概述 数据结构 数组 链表 单链表 循环单链表 双链表 静态链表 栈 队列 散列表 二叉树 堆 跳表 图 字典树 算法 递归 排序 二分查找 搜索 哈希 贪心 分治 回溯 动态规划 字符串匹配 -----其他🐋----- gitbook 准备篇 写作篇 插件篇 发布篇 powered by GitbookLast Modified On： 2020-03-01 10:45:03 "},"mybook/part2/html/简介.html":{"url":"mybook/part2/html/简介.html","title":"简介 ","keywords":"","body":"简介 1.HTML简介 1-1.HTML基本代码 HTML（Hypertext Markup Language）超文本标记语言。 所谓超文本指的是超链接，使用超链接可以让我们从一个页面跳转到另一个页面 它负责网页的三个要素之中的结构。 HTML使用标签的的形式来标识网页中的不同组成部分。 一个最基本的HTML页面： 网页标题 网页正文 1-2.标签 HTML中的标记指的就是标签，HTML使用标记标签来描述网页。 结构： 标签内容 1-3.元素 我们还将一个完整的标签称为元素。 这里我们可以将元素和标签认为是一个同义词。 一级标题 上边的h1我们就称为元素 我是一个段落 p也是一个元素，em是p的子元素，p是 em的父元素。 内容 body也是一个元素。 body是p和em的祖先元素。 p和em是body的后代元素。 1-4.属性 可以为HTML标签设置属性。 通过属性为HTML元素提供附加信息。 属性需要设置在开始标签或自结束标签中。 属性总是以名称/值对的形式出现。比如：name=“value” 有些属性可以是任意值，有些则必须是指定值。 标题 1-5.常见属性 id – id属性作为标签的唯一标识，在同一个网页中不能出现相同的id属性值。 class – class属性用来为标签分组，拥有相同class属性的标签我们认为就是一组，可以出现相同的class性，可以为一个元素指定多个class。 title – title属性用来指定标签的标题，指定title以后，鼠标移入到元素上方时，会出现提示文字。 1-6.注释 HTML注释中的内容不会在网页中显示。 格式: 合理的使用注释可以帮助开发人员理解网页的代码。 注释不能嵌套！ 2.HTML的发展 2-1.HTML的发展 1993年6月：HTML第一个版本发布。 1995年11月：HTML2.0 1997年1月：HTML3.2（W3C推荐） 1999年12月：HTML4.01（W3C推荐） 2000年底：XHTML1.0（W3C推荐） 2014年10月：HTML5（W3C推荐） 2-2.doctype HTML总共有那么多的版本，而且这其中至少有三个版本在广泛使用，那么浏览器怎么知道我们在使用哪个版本呢？ 为了让浏览器知道我们使用的HTML版本我们还需要在网页的最上边添加一个doctype声明，来告诉浏览器网页的版本。 2-3.html4 过渡版 严格版 框架集 2-4.xhtml1.0 过渡版 严格版 框架集 html5 我们会发现html4.01和xhtml的文档声明十分的麻烦。不过不用担心，以上的内容都不是我们使用的，我们使用的是html5的文档声明，而且非常简单： 怪异模式 为了兼容一些旧的页面，浏览器中设置了两种解析模式： 标准模式（Standards Mode） 怪异模式（Quirks Mode） 怪异模式解析网页时会产生一些不可预期的行为，所以我们应该避免怪异模式的出 现。 避免的最好方式就是在页面中编写正确的doctype。 3.编码问题 编码问题 在计算机的内部，文件都是以二进制编码保存的。 所谓的二进制编码就是指1和0，也就是我们的所有内容都需要转换为1和0。 中国两个字在计算机的底层保存的可能要转换为10100101这种二进制码，这一过程 称为编码。 计算机在读取文件时需要将10100101在转换为中国给我们显示这一过程称为解码。 字符集 这就带来一个问题，中国到底是10100101还是01011010到底由谁说了算。 所以我们还需要一个东西称为字符集，字符集规定了如何将文本转换为二进制编码。 常见的字符集：ASKII、ISO8859-1、GBK、 GB2312、UTF-8。 乱码 如果我们保存文件时使用的是utf-8进行编码，而浏览器读取页面时使用gb2312，这样就会导致页面中的内容不能正常显示，也就是我们所说的乱码。 所以我们只需要统一两者使用的字符集就可以解决乱码问题。 这里为了页面有更好的使用性，我们一般使用utf-8。 解决 保存文件的编码我们直接通过编辑器即可指定，接下来就是要告诉浏览器使用什么字符集去解析文件。 在html5中只需要使用meta标签即可完成这个任务： meta的作用 作用： – 标签可提供有关页面的元信息，比如针对搜索引擎和更新频度的描述和关键词。 – 标签位于文档的头部，不包含任何内容。 标签的属性定义了与文档相关联 的名称/值对。 meta的用法 设置页面的字符集 设置网页的描述 设置网页的关键字 请求的重定向 4.常用标签 html 作用： – 标签用于告诉浏览器这个文档中包含的信息是用HTML编写的。 用法： – 所有的网页的内容都需要编写到html标签中，一个页面中html标签只能有一个。 – html标签中有两个子标签head和body 。 head 作用： – 标签用来表示网页的元数据，head中包含了浏览器和搜索引擎使用的其他不可见信息。 用法： – head标签作为html标签的子元素的出现，一个网页中只能有一个head。 title 作用： – 标签表示网页的标题，一般会在网页的标题栏上显示。 – title标签中的文字，是页面优化的最重要因素。在搜索引擎的搜索时最先看到的、最醒目的内容。 用法： – 建议将title标签紧贴着head标签编写，这样搜索引擎可以快速检索到标题标签。 – 网站中的多个页面的title也不应该重复，这样不利于搜索隐藏检索。 body 作用： – 标签用来设置网页的主体，所有在页面中能看到的内容都应该编写到body标签中。 用法： – body标签作为html的子标签使用。 h1~h6 作用： – h1~h6都是网页中的标题标签，用来表示网页中的一个标题，不同的是，从h1~h6重要性越来越低。 – 标题标签相当于正文的标题，通常认为重要性仅次于页面的title。 – 一般标题标签我们只会使用到h3，h3以后的标题标签对于搜索引擎就没有什么意义了。 – 一个页面中只会使用一个h1标签。 p 作用： – 标签表示网页中的一个段落。 – 一般浏览器会在段落的前和后各加上一个换行，也就是段落会在页面中自成一行。 br 作用 – 标签表示一个换行标签，使用br标签可以使br标签后的内容另起一行。 hr 作用： – 标签是水平线标签，使用hr标签可以在页面中打印一条水平线，水平线可以将页面分 成上下两个部分。 img 作用：标签是图片标签，可以用来向页面中引入一张外部的图片。 属性： –src 指向一个外部的图片的路径。 – alt 图片的描述 a 作用： – 标签是超链接标签，通过a标签，可以快速跳转到其他页面。 属性： – href 指向一个链接地址 – target 设置打开目标页面的位置，可选值：blank新窗口、self当前窗口。 5.实体（转义字符） 实体 在HTML中预留了一些字符。 这些预留字符是不能在网页中直接使用的。 比如,我们不能直接在页面中使用号，因为浏览器会将它解析为html标签。 为了可以使用这些预留字符，我们必须在html中使用字符实体。 语法: &实体名; 小于号 &lt; - 版权© &copy; 大于号> &gt; - 引号” &quot; 空格 &nbsp; - 注册商标® &reg; 和符号& &amp; - 商标™ powered by GitbookLast Modified On： 2020-03-01 10:45:03 "},"mybook/part2/html/文本.html":{"url":"mybook/part2/html/文本.html","title":"文本","keywords":"","body":"文本标签 \\和\\ • em标签用于表示一段内容中的着重点。 • strong标签用于表示一个内容的重要性。 • 这两个标签可以单独使用，也可以一起使用。 \\\\警告：任何情况下不要接近僵尸。\\ 他们只是 \\看起来\\ 很友好，实际上他们是为了吃你的胳膊！ \\ • 通常em显示为斜体，而strong显示为粗体。 \\和\\ • i标签会使文字变成斜体。 • b标签会使文字变成粗体。 • 这两个标签和em和strong类似，但是这两个标签没有语义。 • 所以根据html5标准，当我们只想设置文本特殊显示，而不需要强调内容时就可以使用i和b标签。 \\ • small标签表示细则一类的旁注，通常包括免责声明、注意事项、法律限制、版权信息等。 • 浏览器在显示small标签时会显示一个比父元素小的字号。 \\\\&保留所有权利.\\\\ \\ • 使用cite标签可以指明对某内容的引用或参考。例如，戏剧、文章或图书的标题，歌曲、电影、照片或雕塑的名称等。 \\ \\《七龙珠》\\讲的是召唤神龙的故事。 \\ \\和\\ • blockquote和q表示标记引用的文本。 • blockquote用于长引用，q用于短引用。 • 在两个标签中还可以使用cite属性来表示引用的地址。 孟子曾经说过： \\天将降大任于是人也...\\ 他说的真对啊！ \\孔子曾经说过：\\学而时习之不亦说乎\\\\ \\和\\ • sup和sub用于定义上标和下标。 • 上标主要用于表示类似于10的3次方中的3。 • 下标则用于表示类似余H2O中的2。 \\和\\ • ins表示插入的内容，显示时通常会加上下划线。 • del表示删除的内容，显示时通常会加上删除线。 \\和\\ • 如果你的内容包含代码示例或文件名，就可以使用code元素。 • pre元素表示的是预格式化文本，可以使用pre包住code来表示一段代码。 \\ \\ function fun(){ alert(\"hello\"); } \\ \\ 有序列表(Ol) • 使用ol和li来创建一个有序列表。 \\ \\列表项1\\ \\列表项2\\ \\列表项3\\ \\ 无序列表(ul) • 使用ul和li来创建一个无序列表。 \\ \\列表项1\\ \\列表项2\\ \\列表项3\\ \\ 定义列表 • 使用dl、dd、dt来创建一个定义列表。 \\ \\定义项1\\ \\定义描述1\\ \\定义项2\\ \\定义描述2\\ \\定义项3\\ \\定义描述3\\ \\ 文本格式化 单位 • px – 如果我们将一个图片放大的话，我们会发现一个图片是有一个一个的小色块构成的，这一个小色块就是一个像素，也就是1px，对于不同的显示器来说一个像素的大小是不同的。 • 百分比 – 也可以使用一个百分数来表示一个大小，百分比是相对于父元素来说的，如果父元素使用的大小是16px， 则100%就是16px，200%就是32px。 • em – em和百分比类似，也是相对于父元素说的，1em就相当于100%，2em相当于200%，1.5em相当于150%。 颜色 • 在CSS中可以直接使用颜色的关键字来代表一种颜色。 • 17种颜色 – aqua、black、blue、fuchsia、gray、green、lime、maroon、navy、olive、orange、purple、red、silver、teal、white、yellow。 • 还有147种svg颜色，这里就不一一列举了，但是明显即使这些颜色变成double，也不足以描绘我们世界中所有的颜色。 十六进制颜色 • 用的最多的颜色是十六进制符号。一个颜色值，比如：#6600FF实际上包含了三组十六进制的数字。 • 上边的例子中66代表红色的浓度，00代表绿色的浓度，FF代表了蓝色的浓度。最后的颜色是由这些指定浓度的红绿蓝混合而成的。 • 如果每一组数中的两个数字都相同，就可以把十六进制的数字缩短为只有3个字符，如将#6600FF缩短为#60F。 RGB值 • 也可以使用计算机中常用的RGB值来表示颜色。可以使用0~255的数值，也可以使用0%~100%的百分比数。 – RGB(100%,0%,0%) – RGB(0,255,0) • 第一个数表示红色的浓度，第二个数表示绿色浓度，第三个数表示蓝色的浓度。 RGBA • RGBA表示一个颜色和RGB类似，只不过比RGB多了一个A（alpha）来表示透明度，透明度需要一个0-1的值。0表示完全透明，1表示完全不透明。 – RGBA(255,100,5,0.5) 文字大小 • font-size用来指定文字的大小。 字体(一) • 通过font-family可以指定标签中文字使用的字体。 • 例如： p{font-family:Arial} – 上边这行代码指定了p标签中使用名为arial作为字体 • 一般来说只有用户计算机中安装了我们指定的字体时，它才会显示，否则这行代码是没有意义的。 字体(二) • 通过font-family可以同时指定多个字体。 • 例如： p{font-family:Arial , Helvetica , sans-serif} • 如上我实际上指定了三种字体，那么到底使用的是哪个呢？浏览器会优先使用第一个，如果没有找到则使用第二个，以此类推。 • 这里面sans-serif并不是指的具体某一个字体。而是一类字体。 字体分类 • serif（衬线字体） • sans-serif（非衬线字体） • monospace （等宽字体） • cursive （草书字体） • fantasy （虚幻字体） • 以上这些分类都是一些大的分类，并没有涉及具体的类型，如果将字体指定为这些格式，浏览器会自己选择指定类型的字体。 斜体和粗体 • font-style用来指定文本的斜体。 – 指定斜体： font-style:italic – 指定非斜体： font-style:normal • font-weight用来指定文本的粗体。 – 指定粗体： font-weight:bold – 指定非粗体： font-weight:normal 小型大写字母 • font-variant属性可以将字母类型设置为小型大写。在该样式中，字母看起来像是稍微缩小了尺寸的大写字母。 font-variant:small-caps 字体属性的简写 • font可以一次性同时设置多个字体的样式。 • 语法： font:加粗 斜体 小型大写 大小/行高 字体 • 这里前边几个加粗、斜体和小型大写的顺序无所谓，也可以不写，但是大小和字体必须写且必须写到后两个。 行间距 • line-height用于设置行高，行高越大则行间距越大。 • 行间距 = line-height – font-size 大写化 • text-transform样式用于将元素中的字母全都变成大小。 – 大写： text-transform:uppercase – 小写： text-tansform:lowercase – 首字母大写： text-transform:capitalize – 正常： text-transform:none 文本的修饰 • text-decoration属性，用来给文本添加各种修饰。通过它可以为文本的上方、下方或者中间添加线条。 • 可选值： – underline – overline – line-through – none 字母间距和单词间距 • letter-spacing用来设置字符之间的间距。 • word-spacing用来设置单词之间的间距。 • 这两个属性都可以直接指定一个长度或百分数作为值。正数代表的是增加距离，而负数代表减少距离。 对齐文本 • text-align用于设置文本的对齐方式。 • 可选值： – left：左对齐 – right：右对齐 – justify：两边对齐 – center：居中对齐 首行缩进 • text-indent用来设置首行缩进。 • 该样式需要指定一个长度，并且只对第一行生效。 powered by GitbookLast Modified On： 2020-03-01 10:45:03 "},"mybook/part5/gitbook/发布页面.html":{"url":"mybook/part5/gitbook/发布页面.html","title":"发布篇","keywords":"","body":"将_book的页面发布到远程仓库的gh-pages上 一、将书籍页面托管到git远端仓库好 这一环节的任务就是将书籍页面（gitbook build生成的内容）推送到远端仓库。 1、新建仓库 在GitBook项目目录中的_book里面，执行如下命令，创建本地git仓库： git init 2、添加文件 现在可以将本地页面源码添加到本地git仓库中了： git add . 3、添加更新说明 git commit -m '提交页面代码到gh-pages' 4、建立本地仓库与远端仓库的对应关系 git remote add origin https://远程仓库地址.git 5、推送 将本地仓库内容同步到远端仓库： git push -u origin gh-pages 6、之后 至此，就完成了将gitbook的页面推送到远程仓库的任务，之后书籍内容修改后，执行如下操作即可： git add . git commit -m '更新说明文字' git remote add origin https://远程仓库地址.git git push -u origin gh-pages powered by GitbookLast Modified On： 2020-03-01 10:45:03 "}}